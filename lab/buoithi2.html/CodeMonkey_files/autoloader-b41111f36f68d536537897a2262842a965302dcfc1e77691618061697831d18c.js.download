function autoloadControllersWithin(t){queryControllerNamesWithin(t).forEach(loadController)}function queryControllerNamesWithin(t){return Array.from(t.querySelectorAll(`[${controllerAttribute}]`)).map(extractControllerNamesFrom).flat()}function extractControllerNamesFrom(t){return t.getAttribute(controllerAttribute).split(/\s+/).filter(t=>t.length)}function loadController(t){import(controllerFilename(t)).then(r=>registerController(t,r))["catch"](r=>console.log(`Failed to autoload controller: ${t}`,r))}function controllerFilename(t){return`${t.replace(/--/g,"/").replace(/-/g,"_")}_controller`}function registerController(t,r){t in registeredControllers||(application.register(t,r["default"]),registeredControllers[t]=!0)}import{Application}from"stimulus";const application=Application.start(),{controllerAttribute:controllerAttribute}=application.schema,registeredControllers={};new MutationObserver(t=>{for(const{attributeName:r,target:e,type:o}of t)switch(o){case"attributes":r==controllerAttribute&&e.getAttribute(controllerAttribute)&&extractControllerNamesFrom(e).forEach(loadController);case"childList":autoloadControllersWithin(e)}}).observe(document,{attributeFilter:[controllerAttribute],subtree:!0,childList:!0}),autoloadControllersWithin(document);